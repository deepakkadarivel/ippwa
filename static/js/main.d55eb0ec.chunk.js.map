{"version":3,"sources":["serviceWorker.js","components/login/LoginComponent.js","components/app/App.js","index.js","routes.js","shared/images/ipact-logo.svg"],"names":["Boolean","window","location","hostname","match","LoginComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","userName","password","showPassword","_this2","react_default","a","createElement","className","Paper_default","Grid_default","container","alignItems","direction","justify","src","logo","alt","TextField_default","id","variant","label","margin","value","onChange","e","setState","target","type","InputProps","endAdornment","InputAdornment_default","position","IconButton_default","aria-label","onClick","VisibilityOff_default","Visibility_default","Button_default","size","color","Component","App","CssBaseline_default","Switch","basename","pathname","Route","exact","path","component","withRouter","ReactDOM","render","history","createHistory","process","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d55eb0ec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport logo from '../../shared/images/ipact-logo.svg';\nimport './login.scss';\n\nclass LoginComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: '',\n      password: '',\n      showPassword: false,\n    }\n  }\n\n  render() {\n    return <div className='Login'>\n      <Paper\n        className='Login-container'\n      >\n        <Grid\n          container\n          alignItems='center'\n          direction='column'\n          justify='center'\n        >\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <TextField\n            className='Login-container__input'\n            id=\"outlined-adornment-username\"\n            variant=\"outlined\"\n            label=\"User Name\"\n            margin=\"normal\"\n            value={this.state.userName}\n            onChange={e => this.setState({userName: e.target.value})}\n          />\n          <TextField\n            id=\"outlined-adornment-password\"\n            variant=\"outlined\"\n            type={this.state.showPassword ? 'text' : 'password'}\n            label=\"Password\"\n            margin=\"normal\"\n            value={this.state.password}\n            onChange={e => {this.setState({password: e.target.value})}}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"Toggle password visibility\"\n                    onClick={() => this.setState({showPassword: !this.state.showPassword})}\n                  >\n                    {this.state.showPassword ? <VisibilityOff /> : <Visibility />}\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n          <Button\n            className='Login-container__button'\n            variant=\"contained\"\n            size=\"large\"\n            color=\"primary\">\n            Login\n          </Button>\n        </Grid>\n      </Paper>\n      <p className='Login-footer'>© iPact 2018. All rights reserved.</p>\n    </div>;\n  }\n}\n\nexport default LoginComponent;","import React, {Component} from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {Switch, Route} from 'react-router-dom';\nimport './App.scss';\nimport LoginComponent from '../login/LoginComponent';\nimport { withRouter } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CssBaseline/>\n        <Switch basename={window.location.pathname || ''}>\n          <Route exact path='/login' component={LoginComponent}/>\n          {/*<Route exact path=\"/about\" component={About} />*/}\n          {/*<Route exact path=\"/code\" component={Code} />*/}\n          {/*<Route exact path=\"/contact\" component={Contact} />*/}\n          {/*<Route exact path=\"/presence\" component={info} />*/}\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './routes';\n\nReactDOM.render(<Routes/>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport createHistory from 'history/createBrowserHistory';\n\nimport LoginComponent from './components/login/LoginComponent';\nimport App from './components/app/App';\n\n\nexport default function Routes() {\n  const history = createHistory({\n    basename: process.env.PUBLIC_URL\n  });\n\n  return (\n    <BrowserRouter history={history}>\n      <Switch>\n        <Route exact path=\"/\" component={App}/>\n        <Route path=\"/login\" component={LoginComponent}/>\n        <Route component={() => <div>404 Not found 1</div>}/>\n      </Switch>\n    </BrowserRouter>\n  );\n}","module.exports = __webpack_public_path__ + \"static/media/ipact-logo.89576eff.svg\";"],"sourceRoot":""}